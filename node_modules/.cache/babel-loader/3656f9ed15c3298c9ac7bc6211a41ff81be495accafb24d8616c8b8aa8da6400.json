{"ast":null,"code":"var _jsxFileName = \"/Users/ziansari/Code/drs-frontend-app/src/pages/SystemSummary.js\",\n  _s2 = $RefreshSig$();\nimport { useState, useContext, useEffect } from \"react\";\nimport '../css/DataCard.css';\nimport BarChart from '../components/BarChart';\nimport LineChart from '../components/LineChart';\nimport PieChart from '../components/PieChart';\nimport DoughnutChart from '../components/DoughnutChart';\nimport { JobData } from '../stubs/DRS_job_status';\nimport { Link } from 'react-router-dom';\nimport { AppContext } from '../App';\nimport { useQuery, gql } from '@apollo/client';\nimport { LOAD_SYSTEMSUMMARY } from '../GraphQL/Queries';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SystemSummary() {\n  _s2();\n  var _s = $RefreshSig$();\n  /* const [mydata, setMydata] = JobData.map((element) => element.data.jobsBySystem) */\n  const {\n    setSystemName,\n    setSelectedSystem\n  } = useContext(AppContext);\n  const [newSystemName, setNewSystemName] = useState(\"\");\n  const [systemSummaryResponse, setSystemSummaryResponse] = useState([]);\n  const {\n    error,\n    loading,\n    data\n  } = useQuery(LOAD_SYSTEMSUMMARY);\n  useEffect(() => {\n    if (data) {\n      setSystemSummaryResponse(data.systemSummary);\n    } else {\n      setSystemSummaryResponse(JobData.map(element => element.data.jobsBySystem));\n    }\n  }, [data]);\n  function PopulateChart(props) {\n    _s();\n    const [jobStatusData, setJobStatusData] = useState({\n      labels: ['Completed', 'Pending'],\n      datasets: [{\n        label: props.label,\n        data: [props.data.completedJobs, props.data.pendingJobs],\n        backgroundColor: ['#47B39C', '#FFC154']\n      }]\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(PieChart, {\n        chartData: jobStatusData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this), \"  \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this);\n  }\n  _s(PopulateChart, \"mfRxZP0WaTu48G6c8yn3q3Xh2So=\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page-contain\",\n    children: systemSummaryResponse.map(item => /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/jobsummary\",\n      className: \"data-card\",\n      onClick: () => setSystemName(item.systemName),\n      children: [\" \", /*#__PURE__*/_jsxDEV(PopulateChart, {\n        data: item,\n        label: item.systemName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 103\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"link-text\",\n        children: [\" \", item.systemName, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 158\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s2(SystemSummary, \"9VERbHt2uEKNLiMjXn92bnWgDA0=\", false, function () {\n  return [useQuery];\n});\n_c = SystemSummary;\nexport default SystemSummary;\nvar _c;\n$RefreshReg$(_c, \"SystemSummary\");","map":{"version":3,"names":["useState","useContext","useEffect","BarChart","LineChart","PieChart","DoughnutChart","JobData","Link","AppContext","useQuery","gql","LOAD_SYSTEMSUMMARY","SystemSummary","setSystemName","setSelectedSystem","newSystemName","setNewSystemName","systemSummaryResponse","setSystemSummaryResponse","error","loading","data","systemSummary","map","element","jobsBySystem","PopulateChart","props","jobStatusData","setJobStatusData","labels","datasets","label","completedJobs","pendingJobs","backgroundColor","item","systemName"],"sources":["/Users/ziansari/Code/drs-frontend-app/src/pages/SystemSummary.js"],"sourcesContent":["import { useState, useContext, useEffect } from \"react\";\nimport '../css/DataCard.css';\nimport BarChart from '../components/BarChart';\nimport LineChart from '../components/LineChart';\nimport PieChart from '../components/PieChart';\nimport DoughnutChart from '../components/DoughnutChart';\nimport { JobData } from '../stubs/DRS_job_status';\nimport { Link } from 'react-router-dom';\nimport { AppContext } from '../App';\nimport { useQuery, gql } from '@apollo/client';\nimport { LOAD_SYSTEMSUMMARY } from '../GraphQL/Queries';\n\nfunction SystemSummary() {\n\n\n  /* const [mydata, setMydata] = JobData.map((element) => element.data.jobsBySystem) */\n  const { setSystemName,setSelectedSystem } = useContext(AppContext);\n  \n  \n  const [newSystemName, setNewSystemName] = useState(\"\");\n\n  const [systemSummaryResponse, setSystemSummaryResponse] = useState([]);\n\n  const { error, loading, data } = useQuery(LOAD_SYSTEMSUMMARY);\n  useEffect(() => {\n    if(data){\n    setSystemSummaryResponse(data.systemSummary);\n  }\n  else {\n    setSystemSummaryResponse(JobData.map((element) => element.data.jobsBySystem));\n  }\n\n  }, [data])\n\n  function PopulateChart(props) {\n    const [jobStatusData, setJobStatusData] = useState(\n\n      {\n        labels: ['Completed', 'Pending'],\n        datasets: [{\n          label: props.label,\n          data: [props.data.completedJobs, props.data.pendingJobs],\n          backgroundColor: [\n            '#47B39C',\n            '#FFC154'\n\n          ]\n        }]\n      }\n    )\n\n    return (\n      <div ><PieChart chartData={jobStatusData} />  </div>\n    )\n  }\n\n  return (\n    <div className=\"page-contain\">\n\n      {systemSummaryResponse.map((item) =>\n        <Link to='/jobsummary' className='data-card' onClick={() => setSystemName(item.systemName)} > < PopulateChart data={item} label={item.systemName} /> <span className=\"link-text\"    > {item.systemName} </span></Link>\n      )}\n    </div>\n  );\n}\n\nexport default SystemSummary;"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AACvD,OAAO,qBAAqB;AAC5B,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,aAAa,MAAM,6BAA6B;AACvD,SAASC,OAAO,QAAQ,yBAAyB;AACjD,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAASC,UAAU,QAAQ,QAAQ;AACnC,SAASC,QAAQ,EAAEC,GAAG,QAAQ,gBAAgB;AAC9C,SAASC,kBAAkB,QAAQ,oBAAoB;AAAC;AAExD,SAASC,aAAa,GAAG;EAAA;EAAA;EAGvB;EACA,MAAM;IAAEC,aAAa;IAACC;EAAkB,CAAC,GAAGd,UAAU,CAACQ,UAAU,CAAC;EAGlE,MAAM,CAACO,aAAa,EAAEC,gBAAgB,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAEtD,MAAM,CAACkB,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAEtE,MAAM;IAAEoB,KAAK;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGZ,QAAQ,CAACE,kBAAkB,CAAC;EAC7DV,SAAS,CAAC,MAAM;IACd,IAAGoB,IAAI,EAAC;MACRH,wBAAwB,CAACG,IAAI,CAACC,aAAa,CAAC;IAC9C,CAAC,MACI;MACHJ,wBAAwB,CAACZ,OAAO,CAACiB,GAAG,CAAEC,OAAO,IAAKA,OAAO,CAACH,IAAI,CAACI,YAAY,CAAC,CAAC;IAC/E;EAEA,CAAC,EAAE,CAACJ,IAAI,CAAC,CAAC;EAEV,SAASK,aAAa,CAACC,KAAK,EAAE;IAAA;IAC5B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAG9B,QAAQ,CAEhD;MACE+B,MAAM,EAAE,CAAC,WAAW,EAAE,SAAS,CAAC;MAChCC,QAAQ,EAAE,CAAC;QACTC,KAAK,EAAEL,KAAK,CAACK,KAAK;QAClBX,IAAI,EAAE,CAACM,KAAK,CAACN,IAAI,CAACY,aAAa,EAAEN,KAAK,CAACN,IAAI,CAACa,WAAW,CAAC;QACxDC,eAAe,EAAE,CACf,SAAS,EACT,SAAS;MAGb,CAAC;IACH,CAAC,CACF;IAED,oBACE;MAAA,wBAAM,QAAC,QAAQ;QAAC,SAAS,EAAEP;MAAc;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA;MAAA;MAAA;MAAA;IAAA,QAAQ;EAExD;EAAC,GApBQF,aAAa;EAsBtB,oBACE;IAAK,SAAS,EAAC,cAAc;IAAA,UAE1BT,qBAAqB,CAACM,GAAG,CAAEa,IAAI,iBAC9B,QAAC,IAAI;MAAC,EAAE,EAAC,aAAa;MAAC,SAAS,EAAC,WAAW;MAAC,OAAO,EAAE,MAAMvB,aAAa,CAACuB,IAAI,CAACC,UAAU,CAAE;MAAA,6BAAG,QAAE,aAAa;QAAC,IAAI,EAAED,IAAK;QAAC,KAAK,EAAEA,IAAI,CAACC;MAAW;QAAA;QAAA;QAAA;MAAA,QAAG,oBAAC;QAAM,SAAS,EAAC,WAAW;QAAA,gBAAOD,IAAI,CAACC,UAAU;MAAA;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QAAO;EACvN;IAAA;IAAA;IAAA;EAAA,QACG;AAEV;AAAC,IApDQzB,aAAa;EAAA,QAWaH,QAAQ;AAAA;AAAA,KAXlCG,aAAa;AAsDtB,eAAeA,aAAa;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}